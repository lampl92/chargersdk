{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"dr",
				"DR_MODEM_e"
			],
			[
				"ulmsgbod",
				"ulMsgBodyCtxLen_dec"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include \"modem.h\"\n#include \"bsp_uart.h\"\n#include \"user_app.h\"\n\n#define MODEMDEBUG(msg) do{printf_safe(msg)}while(0);\n\nstatic int get_line(uint8_t *line, int len);\n\nstatic uint8_t UART_getc(void)\n{\n    uint8_t ch = 0;\n    uart_read(UART_PORT_GPRS, &ch, 1, 0);\n    return ch;\n}\n\nstatic void UART_puts(uint8_t *cmd)\n{\n    uart_write(UART_PORT_GPRS, cmd, strlen(cmd));\n}\n\n/** @brief\n *\n * @param line uint8_t*\n * @param len uint32_t\n * @return uint32_t\n *\n */\nstatic  uint32_t get_line(uint8_t *line, uint32_t len)\n{\n    uint8_t  c;\n    uint32_t   cnt  = 0;\n    int   i;\n\n    for (i = 0; i < len; i++)\n    {\n        c  = UART_getc();\n        if ( c == '\\0' )\n        {\n            break;\n        }\n\n        if ( c == '\\r' )\n        {\n            c  = UART_getc();\n            {\n                break;\n            }\n        }\n\n        line[cnt++]  = c;\n    }\n\n    return cnt;\n}\nstatic uint32_t modem_send_at(uint8_t *format, ...)\n{\n    uint8_t     cmd[MAX_COMMAND_LEN + 1]  = {0};\n    va_list  va;\n    uint32_t      n;\n\n\n    va_start(va, format);\n    n  = vsnprintf(cmd, sizeof(cmd) - 1, format, va);\n    va_end(va);\n\n    UART_puts(cmd);\n\n    cmd[strlen(cmd) - 1]  = '\\0';\n    MODEMDEBUG((\"send at: [%s].\\r\\n\", cmd));\n\n    return n;\n}\n\n\n/**\n * modem_get_at_reply\n *\n * @param      reply   The reply\n * @param      len     The length\n * @param      key     关键词\n * @param      second  延时时间\n *\n * @return     { description_of_the_return_value }\n */\nDR_MODEM_e modem_get_at_reply(uint8_t *reply, uint32_t len, const uint8_t *key, uint32_t second)\n{\n    uint8_t  *p;\n    int    time;\n    int    n;\n    int    sockfd;\n    int    stat;\n    int    ret;\n\n\n    time  = 0;\n    while (1)\n    {\n        n  = get_line(reply, len);\n        if ( n > 0 )\n        {\n            p  = strstr(reply, key);\n            if ( p )\n            {\n                ret  = DR_MODEM_OK;\n                break;\n            }\n\n            p  = strstr(reply, \"ERROR\");\n            if ( p )\n            {\n                ret  = DR_MODEM_ERROR;\n                break;\n            }\n\n//            p  = strstr(reply, \"MIPSTAT:\");\n//            if ( p )\n//            {\n//                if ( (sscanf(reply, \"+MIPSTAT: %d,%d\", &sockfd, &stat) == 2)\n//                        && (sockfd == 1) && (stat == 1) )\n//                {\n//                    ret  = -2;\n//                    break;\n//                }\n//            }\n\n            memset(reply, '\\0', n);\n            n  = 0;\n        }\n\n        time += 100;\n        if ( time > second * 1000 )\n        {\n            ret  = DR_MODEM_TIMEOUT;\n            break;\n        }\n\n        vTaskDelay(100);\n    }\n\n    MODEMDEBUG((\"wait at return: [%s].\\r\\n\\r\\n\", reply));\n    return ret;\n}\n\n\n/** @brief 初始化modem，置Key开启模块，检测AT返回命令\n *\n * @param void\n * @return int\n *\n */\nstatic DR_MODEM_e modem_open(void)\n{\n    uint8_t  reply[MAX_COMMAND_LEN + 1]  = {0};\n    DR_MODEM_e ret;\n\n    MODEMDEBUG((\"modem open: \\r\\n\"));\n    GPRS_set; //上电启动\n    ret = modem_get_at_reply(reply, sizeof(reply) - 1, \"RDY\", 5);\n    switch(ret)\n    {\n    case DR_MODEM_OK:\n        modem_send_at((\"AT\\r\"));\n        ret = modem_get_at_reply(reply, sizeof(reply) - 1, \"OK\", 3);\n        break;\n    case DR_MODEM_ERROR:\n    case DR_MODEM_TIMEOUT:\n        break;\n    }\n\n    return ret;\n}\n\n/** @brief 关闭回显\n *\n * @param void\n * @return int\n *\n */\nDR_MODEM_e modem_disable_echo(void)\n{\n    uint8_t  reply[MAX_COMMAND_LEN + 1]  = {0};\n    int ret;\n\n    MODEMDEBUG((\"modem disable echo: \\r\\n\"));\n    modem_send_at((\"ATE0V1\\r\"));\n    ret = modem_get_at_reply(reply, sizeof(reply) - 1, \"OK\", 3);\n\n    return ret;\n}\n\n\n/** @brief PIN检测\n *\n * @param void\n * @return int\n *\n */\nDR_MODEM_e modem_get_simcard_stat(DevModem_t *pModem)\n{\n    uint8_t  reply[MAX_COMMAND_LEN + 1]  = {0};\n    int ret;\n\n    MODEMDEBUG((\"modem get simcard stat: \\r\\n\"));\n    modem_send_at((\"AT+CPIN?\\r\"));\n    ret = modem_get_at_reply(reply, sizeof(reply) - 1, \"+CPIN:\", 3);\n    switch(ret)\n    {\n    case DR_MODEM_OK:\n        if(strstr(reply, \"READY\") != NULL)\n        {\n            pModem->status.ucSimStat = DR_MODEM_CPIN_READY;\n            ret = DR_MODEM_CPIN_READY;\n        }\n        else\n        {\n            pModem->status.ucSimStat = DR_MODEM_CPIN_OTHER;\n            ret = DR_MODEM_CPIN_OTHER;\n        }\n        break;\n    default:\n        ret = DR_MODEM_ERROR;\n        break;\n    }\n    return ret;\n}\n\n\n/** @brief 信号强度检测\n *\n * @param void\n * @return uint8_t 返回信号强度  0-99 值越小信号越好\n *\n */\nint modem_get_signal_quality(DevModem_t *pModem)\n{\n    uint8_t  reply[MAX_COMMAND_LEN + 1]  = {0};\n    uint8_t  s[8 + 1]  = {0};\n    int ret;\n\n\n    MODEMDEBUG((\"modem get aerial signal: \\r\\n\"));\n    modem_send_at((\"AT+CSQ\\r\"));\n    ret = modem_get_at_reply(reply, sizeof(reply) - 1, \"+CSQ:\", 3);\n    switch(ret)\n    {\n    case DR_MODEM_OK:\n        sscanf(reply, \"%*[^ ] %[0-9]\", s);\n        pModem->status.ucSignalQuality = atoi(s);\n        break;\n    }\n    return ret;\n}\n\n/** @brief 网络状态检测\n *\n * @param void\n * @return uint8_t\n *\n */\nuint8_t modem_get_net_reg(void)\n{\n    uint8_t  reply[MAX_COMMAND_LEN + 1]  = {0};\n    uint8_t  s[8 + 1]  = {0};\n\n\n    MODEMDEBUG((\"modem get network stat: \\r\\n\"));\n    modem_send_at((\"AT+CREG?\\r\"));\n    ret = modem_get_at_reply(reply, sizeof(reply) - 1, \"+CREG:\", 3);\n    switch(ret)\n    {\n    case DR_MODEM_OK:\n        sscanf(reply, \"%*[^,],%[0-9]\", s);\n        break;\n    }\n\n    return atoi(s);\n}\n\n\n/*\n* modem_get_gprs_stat\n*\n* @return int\n*/\nint\nmodem_get_gprs_reg(void)\n{\n    uint8_t  reply[MAX_COMMAND_LEN + 1]  = {0};\n    uint8_t  s[8 + 1]  = {0};\n\n    /* Response: +CGREG: 0,1\n                 OK          */\n\n\n    MODEMDEBUG((\"modem get gprs stat: \\r\\n\"));\n    modem_send_at((\"AT+CGREG?\\r\"));\n\n    if ( modem_get_at_reply(reply, sizeof(reply) - 1, \"+CGREG:\", 3)\n            || (sscanf(reply, \"%*[^,],%[0-9]\", s) != 1) )\n    {\n        return -1;\n    }\n\n    return (atoi(s));\n}\n\nvoid modem_get_info( *info)\n{\n    MODEMDEBUG((\"modem get informations: \\r\\n\"));\n\n    /* sim_sta */\n    info->sim_sta  = modem_get_simcard_stat();\n    if ( info->sim_sta < 0 )\n    {\n        info->err_code |= MODEM_GET_SIM_STA_ERR;\n    }\n\n    /* signal_strength */\n    info->signal_strength  = modem_get_aerial_signal();\n    if ( info->signal_strength < 0 )\n    {\n        info->err_code |= MODEM_GET_SIGNAL_STRENGTH_ERR;\n    }\n\n    /* network_sta */\n    info->network_sta  = modem_get_network_stat();\n    if ( info->network_sta < 0 )\n    {\n        info->err_code |= MODEM_GET_NETWORK_STA_ERR;\n    }\n\n    /* gprs_sta */\n    info->gprs_sta  = modem_get_gprs_stat();\n    if ( info->gprs_sta < 0 )\n    {\n        info->err_code |= MODEM_GET_GPRS_STA_ERR;\n    }\n}\n\n\nint modem_init(void)\n{\n    uint8_t  reply[MAX_COMMAND_LEN + 1]  = {0};\n    int ret;\n\n    MODEMDEBUG((\"modem init: \\r\\n\"));\n    ret = modem_open();\n    ret = modem_disable_echo();\n\n    return ret;\n}\n",
			"file": "/D/Documents/Projects/chargersdk/src/drivers/device/src/modem.c",
			"file_size": 7277,
			"file_write_time": 131411355021171854,
			"settings":
			{
				"buffer_size": 6865,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"contents": "#ifndef _MODEM_H_\n#define _MODEM_H_\n\n\n\n\n/*\n *******************************************************************************\n *\n * public declare\n *\n *******************************************************************************\n */\n\n#define MAX_COMMAND_LEN                  512  /* 最大命令长度 */\n\n/* error code */\ntypedef enum\n{\n    DR_MODEM_ERROR,\n    DR_MODEM_OK,\n    DR_MODEM_TIMEOUT,\n    DR_MODEM_CPIN_READY,\n    DR_MODEM_CPIN_OTHER,\n    DR_MODEM_REG_LOCAl,\n    DR_MODEM_REG_ROAMING\n\n} DR_MODEM_e;\n\n\n\n\n#define MODEM_GET_UART_STA_ERR           1<<0\n#define MODEM_GET_SIM_STA_ERR            1<<1\n#define MODEM_GET_SIGNAL_STRENGTH_ERR    1<<2\n#define MODEM_GET_SOFTWARE_VER_ERR       1<<3\n#define MODEM_GET_GPRS_STA_ERR           1<<6\n\n/* information length */\n#define MODEM_MANUFACTURER_LEN           7\n#define MODEM_MODEL_LEN                  4\n#define MODEM_SERIAL_NUMBER_LEN          15\n#define MODEM_IMEI_LEN                   15\n#define MODEM_SIMCARD_ID_LEN             20\n\n\ntypedef struct\n{\n    int   uart_sta;                                     /* 串口状态 */\n    int   err_code;                                     /* 错误码 */\n} ModemInfo_t;\n\ntypedef struct\n{\n    uint8_t ucSimStat;        //CPIN   见errcode\n    uint8_t ucNetReg;            //CREG 网络注册信息    1 || 5\n    uint8_t ucGprsReg;       //CGREG GPRS网络注册信息  1 || 5\n    uint8_t ucSignalQuality;   //CSQ 信号强度  rssi:0-99  越小越好\n} ModemStatus_t;\n\ntypedef struct _dev_modem\n{\n    ModemInfo_t info;\n    ModemStatus_t status;\n} DevModem_t;\n\n\n\nint     modem_send_at(char *format, ...);                                         /* 发送AT命令 */\nint     modem_get_at_reply(uint8_t *reply, uint32_t len, const uint8_t *key, uint32_t second);    /* 获取AT命令返回 */\n\nint     modem_open(void);                                                         /* 获取串口状态 */\nint     modem_disable_echo(void);                                                 /* 关闭回显 */\n\nint     modem_get_simcard_stat(void);                                             /* 获取SIM卡状态 */\nint     modem_get_simcard_id(char *id);                                           /* 获取SIM卡ID */\nint     modem_get_aerial_signal(void);                                            /* 获取模块信号强度 */\nint     modem_get_manufacturer(char *manufacturer);                               /* 获取模块生产厂家 */\nint     modem_get_imei(char *imei);                                               /* 获取模块IMEI号 */\nint     modem_get_support_band(char *band);                                       /* 获取模块支持频段 */\nint     modem_get_model(char *model);                                             /* 获取模块型号 */\nint     modem_get_serial_number(char *sn);                                        /* 获取模块序列号 */\nint     modem_get_network_stat(void);                                             /* 获取模块网络注册状态 */\nint     modem_get_gprs_stat(void);                                                /* 获取模块GPRS网络注册状态 */\nvoid    modem_get_info(struct modem_info *info);                                  /* 获取模块信息 */\n\n\n\n\n#endif/*_MODEM_H_*/\n",
			"file": "/D/Documents/Projects/chargersdk/src/drivers/device/inc/modem.h",
			"file_size": 3206,
			"file_write_time": 131411353692765874,
			"settings":
			{
				"buffer_size": 2986,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Windows",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 104.0,
		"last_filter": "remove",
		"selected_items":
		[
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"view",
				"View: Toggle Menu"
			]
		],
		"width": 560.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '261dd1222b4693ce6d4f85f9c827ac06' + '6d5ab8ebdd020086947172a8a1356bb6'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'https://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			"import urllib.request,os,hashlib; h = '261dd1222b4693ce6d4f85f9c827ac06' + '6d5ab8ebdd020086947172a8a1356bb6'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = '261dd1222b4693ce6d4f85f9c827ac06' + '6d5ab8ebdd020086947172a8a1356bb6'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Documents/Projects/chargersdk",
		"/D/Documents/Projects/chargersdk/src",
		"/D/Documents/Projects/chargersdk/src/drivers",
		"/D/Documents/Projects/chargersdk/src/drivers/device",
		"/D/Documents/Projects/chargersdk/src/drivers/device/inc",
		"/D/Documents/Projects/chargersdk/src/drivers/device/src"
	],
	"file_history":
	[
		"/C/Users/DT-553/AppData/Roaming/Sublime Text 3/Packages/SublimeAStyleFormatter/SublimeAStyleFormatter.sublime-settings",
		"/C/Users/DT-553/AppData/Roaming/Sublime Text 3/Packages/SublimeAStyleFormatter/Default (Windows).sublime-keymap",
		"/D/Documents/Projects/chargersdk/src/drivers/device/src/modem.c.save",
		"/D/Downloads/48605711Modem/modem.h",
		"/D/Downloads/48605711Modem/modem.c",
		"/D/Documents/Projects/chargersdk/src/net/lwip-1.4.1/src/netif/ppp/ppp.h",
		"/D/Documents/Projects/chargersdk/src/net/lwip-1.4.1/src/netif/ppp/ppp.c",
		"/E/SYSTEM/evse.cfg",
		"/D/Program Files/WinRAR/rarreg.key",
		"/D/Downloads/82321044jz_ppp/jz_ppp/sms.c",
		"/D/Downloads/82321044jz_ppp/jz_ppp/ppp1.c",
		"/D/Downloads/82321044jz_ppp/jz_ppp/ppp.h",
		"/D/Downloads/82321044jz_ppp/jz_ppp/ppp.c",
		"/D/Downloads/82321044jz_ppp/jz_ppp/md5.c",
		"/H/todo/通用Makefile",
		"/D/Program Files (x86)/Keil_v5/ARM/RL/TCPnet/Drivers/Std_Modem.c",
		"/D/Documents/Projects/chargersdk/src/drivers/device/src/Std_Modem.c",
		"/D/Downloads/E-IM/cli_evse.c",
		"/D/Documents/Projects/chargersdk/src/drivers/device/src/net_modem.h",
		"/D/Documents/Projects/chargersdk/src/drivers/device/inc/net_modem.h",
		"/D/Documents/Projects/chargersdk/src/drivers/device/src/Modem_Standard.c",
		"/D/Program Files (x86)/Keil_v5/ARM/PACK/Keil/MDK-Middleware/7.3.0/Network/Driver/Modem_Standard.c",
		"/D/Documents/Projects/chargersdk/src/app/libEcharge/ech_protocol.h",
		"/D/Documents/Projects/chargersdk/src/app/libEcharge/ech_protocol.c",
		"/C/Users/DT-553/AppData/Roaming/Sublime Text 3/Packages/YcmdCompletion/YcmdCompletion.sublime-settings",
		"/C/Users/DT-553/AppData/Roaming/Sublime Text 3/Packages/C++YouCompleteMe/C++YouCompleteMe.sublime-settings",
		"/C/Users/DT-553/AppData/Roaming/Sublime Text 3/Packages/Terminal/Default (Windows).sublime-keymap",
		"/D/Documents/Projects/chargersdk/src/middlewares/gdsl-1.8/src/gdsl_list.c",
		"/C/Users/DT-553/AppData/Roaming/Sublime Text 3/Packages/C++YouCompleteMe/Default (Windows).sublime-keymap",
		"/C/Users/DT-553/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/D/Documents/Projects/chargersdk/build/ST3/csproj.sublime-project",
		"/D/Documents/Projects/codeblocktest/testaes/tiny-AES128-C/enc_dec.c",
		"/D/Documents/Projects/codeblocktest/testaes/tiny-AES128-C/enc_dec.h",
		"/D/Documents/RGW/参考资料/marvell/MC200/wmsdk_bundle-2.14.54/wmsdk_bundle-2.14.54/wmsdk/src/libc/README",
		"/D/Documents/RGW/Projects/Finger-Vein-Authentication/FVA-USB/doc/ReadMe.md",
		"/C/Users/DT-553/AppData/Local/Haroopad/Themes/viewer/default.css",
		"/C/Users/DT-553/AppData/Local/Haroopad/Themes/editor/default.css",
		"/Y/workspace/HOME_IBSU/DeviceManage/DeviceManage.h",
		"//192.168.164.130/vmshare/workspace/HOME_IBSU/IBSUMain/RwIBSUXMLConfig.h",
		"/D/Documents/Projects/Finger-Vein-Authentication/FVA-USB/src/exe/H1EUSB_SampleApp/camellia.c",
		"/Y/workspace/HOME_IBSU/DeviceManage/CardsDevice.cpp",
		"/Y/workspace/HOME_IBSU/DeviceManage/CShieldHandler.cpp",
		"/Y/workspace/HOME_IBSU/common/include/ComBase.h",
		"/D/Documents/Projects/Finger-Vein-Authentication/FVA-USB/src/exe/H2E_SampleApp/H2E_Com.cpp",
		"/Y/workspace/HOME_IBSU/IBSUMain/CFileTransfer.d",
		"/D/rgw/D/充电桩/3/driverlib/adc.txt",
		"/D/rgw/D/充电桩/3/driverlib/adc.c",
		"/D/Documents/Projects/Finger-Vein-Authentication/FVA-USB/src/exe/H1EUSB_SampleApp/ReadMe.txt",
		"/D/workspace/rt-thread-2.1.0_beta/bsp/stm32f40x/rtconfig.py",
		"/D/Downloads/DCP/api_run.dat",
		"/D/Downloads/DCP/S99userapp.dat",
		"/D/Downloads/深圳市铭特科技充电桩读卡器/MT.c"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"reg",
			"align",
			"GET_AT",
			"modem_get_at_reply",
			"pppHup",
			"pppSigHUP",
			"pppHup",
			"pppStop",
			"pppStoppppStop",
			"pppClose",
			" ",
			"X",
			" ",
			"uint8_t",
			"makeSt"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/D/Documents/Projects/chargersdk/src/drivers/device/src/modem.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6865,
						"regions":
						{
						},
						"selection":
						[
							[
								1696,
								1593
							]
						],
						"settings":
						{
							"in_converting": true,
							"origin_encoding": "GB2312",
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1296.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/D/Documents/Projects/chargersdk/src/drivers/device/inc/modem.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2986,
						"regions":
						{
						},
						"selection":
						[
							[
								304,
								304
							]
						],
						"settings":
						{
							"in_converting": true,
							"origin_encoding": "GB2312",
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.CppYCM.2":
	{
		"height": 0.0
	},
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "csproj.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"echprot",
				"src\\app\\libEcharge\\ech_protocol.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 964.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 228.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
